plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'org.mangorage'
version = '1.1.0'

configurations {
    shadow
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    compileOnly gradleApi()

    compileOnly 'com.google.code.gson:gson:2.10.1'
    compileOnly 'org.eclipse.jgit:org.eclipse.jgit:6.9.0.202403050737-r'

    shadow 'com.google.code.gson:gson:2.10.1'
    shadow 'org.eclipse.jgit:org.eclipse.jgit:6.9.0.202403050737-r'
}

test {
    useJUnitPlatform()
}

publishing {
    publications.register("mmlgradle", MavenPublication) {
        artifact jar
//        artifact sourcesJar
//        artifact javadocJar

        pom {
            name = 'MangoRage Mod Loader'
            description = 'MangoRage Mod Loader Gradle for generating MC Sources/running the loader!'
            url = 'https://github.com/MangoRageBot/MangoBot'
            issueManagement {
                system = 'github'
                url = 'https://github.com/MangoRageBot/MangoBot/issues'
            }
            developers {
                developer {
                    id = 'mangorage'
                    name = 'MangoRage'
                }
            }
        }
    }

    repositories {
        maven {
            url = "https://maven.mangorage.org/releases/"

            credentials {
                username = "mango"
                password = "$MAVEN_PASSWORD"
            }
        }
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
}

jar {
    dependsOn configurations.shadow

    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.shadow.collect {
            zipTree(it)
        }
    } {
        exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    setArchiveClassifier('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}


tasks.named('shadowJar') {
    archiveClassifier.set('')
}